/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package edu.eci.pdsw.wordprocessor.view;

import edu.eci.pdsw.wordprocessor.command.Command;
import edu.eci.pdsw.wordprocessor.command.CommandDelete;
import edu.eci.pdsw.wordprocessor.command.CommandWrite;
import edu.eci.pdsw.wordprocessor.langproc.AutoReplaceDocumentFilter;
import edu.eci.pdsw.wordprocessor.langproc.style.EnglishStyleAutoCorrector;
import edu.eci.pdsw.wordprocessor.langproc.style.SpanishStyleAutoCorrector;
import edu.eci.pdsw.wordprocessor.langproc.typos.EnglishTyposDataSource;
import edu.eci.pdsw.wordprocessor.langproc.typos.SpanishTyposDataSource;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FilenameFilter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.Stack;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.text.AbstractDocument;
import javax.swing.text.Document;
import javax.swing.text.DocumentFilter;

/**
 *
 * @author hcadavid
 */
public class GuordMainFrame extends javax.swing.JFrame {
   
    final EnglishStyleAutoCorrector autoc=new EnglishStyleAutoCorrector();
    private static final String defaultPath="/tmp";
    
    /**
     * Creates new form GuordMainFrame
     */
    public GuordMainFrame() {
        initComponents();

        final Document document = textArea.getDocument();
        final EnglishTyposDataSource se = new EnglishTyposDataSource();

        
        
        DocumentFilter docFilter = new AutoReplaceDocumentFilter(document, se);

        if (document instanceof AbstractDocument) {
            ((AbstractDocument) document).setDocumentFilter(docFilter);
        }

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFormattedTextField1 = new javax.swing.JFormattedTextField();
        textjsp = new javax.swing.JScrollPane();
        textArea = new javax.swing.JTextArea();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        saveMenuItem = new javax.swing.JMenuItem();
        loadMenuItem = new javax.swing.JMenuItem();
        exitMenuItem = new javax.swing.JMenuItem();
        jMenu3 = new javax.swing.JMenu();
        autoCorrectStyleMenuItem = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        jFormattedTextField1.setText("jFormattedTextField1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        textArea.setColumns(20);
        textArea.setRows(5);
        textArea.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                textAreaKeyPressed(evt);
            }
        });
        textjsp.setViewportView(textArea);

        getContentPane().add(textjsp, java.awt.BorderLayout.CENTER);

        jMenu1.setText("File");

        saveMenuItem.setText("save");
        saveMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(saveMenuItem);

        loadMenuItem.setText("load");
        loadMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                loadMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(loadMenuItem);

        exitMenuItem.setText("Quit");
        exitMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMenuItemActionPerformed(evt);
            }
        });
        jMenu1.add(exitMenuItem);

        jMenuBar1.add(jMenu1);

        jMenu3.setText("Style");

        autoCorrectStyleMenuItem.setText("Autocorrect");
        autoCorrectStyleMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                autoCorrectStyleMenuItemActionPerformed(evt);
            }
        });
        jMenu3.add(autoCorrectStyleMenuItem);

        jMenuBar1.add(jMenu3);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    


    private void saveMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMenuItemActionPerformed

        // prompt the user to enter the file name
        String name = JOptionPane.showInputDialog(this, "Enter file name.");
        if (!name.endsWith(".guord")) {
            name = name + ".guord";
        }
        ObjectOutputStream oos = null;
        try {
            String body = textArea.getText();
            oos = new ObjectOutputStream(new FileOutputStream(defaultPath + name));
            oos.writeObject(body);
            oos.close();
        } catch (FileNotFoundException ex) {
            Logger.getLogger(GuordMainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } catch (IOException ex) {
            Logger.getLogger(GuordMainFrame.class.getName()).log(Level.SEVERE, null, ex);
        } finally {
            try {
                oos.close();
            } catch (IOException ex) {
                Logger.getLogger(GuordMainFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        }


    }//GEN-LAST:event_saveMenuItemActionPerformed

    private void loadMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_loadMenuItemActionPerformed

        String name = null;

        File filesPath = new File(defaultPath);
        String[] choices = filesPath.list(new FilenameFilter() {
            @Override
            public boolean accept(File dir, String name) {
                return (name.endsWith(".guord"));
            }
        });
        System.out.println(choices[0]);
        if (choices.length > 0) {
            name = (String) JOptionPane.showInputDialog(null, "Choose document...",
                    "Choose document", JOptionPane.QUESTION_MESSAGE, null, // Use
                    choices, // Array of choices
                    choices[0]); // Initial choice            
        } else {
            JOptionPane.showInputDialog(null, "No documents found");
        }

        if (name != null) {
            ObjectInputStream ois = null;
            try {
                ois = new ObjectInputStream(new FileInputStream(defaultPath + name));
                String obj = (String) ois.readObject();
                textArea.setText(obj);
            } catch (IOException | ClassNotFoundException ex) {
                Logger.getLogger(GuordMainFrame.class.getName()).log(Level.SEVERE, null, ex);
            } finally {
                try {
                    if (ois != null) {
                        ois.close();
                    }
                } catch (IOException ex) {
                    Logger.getLogger(GuordMainFrame.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }


    }//GEN-LAST:event_loadMenuItemActionPerformed

    private void exitMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMenuItemActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitMenuItemActionPerformed

    private void autoCorrectStyleMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_autoCorrectStyleMenuItemActionPerformed
        String text=textArea.getText();
        textArea.setText(autoc.checkAndReplace(text));        
    }//GEN-LAST:event_autoCorrectStyleMenuItemActionPerformed

    private Stack <Command> write= new Stack<Command>();
    private Stack <Command> delete = new Stack<Command>();
    private void textAreaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_textAreaKeyPressed
        // TODO add your handling code here:
        if(evt.isControlDown() && evt.getKeyCode()==KeyEvent.VK_Z){
            System.out.println(write.size());
            Command comand = write.pop();
            System.out.println(write.size());
            comand.undo();
            delete.add(comand);
            System.out.println(delete.size()+" Delete in write");
        }
        else if(evt.isControlDown() && evt.getKeyCode()==KeyEvent.VK_Y){
            System.out.println(delete.size());
            Command comand = delete.pop();
            System.out.println(delete.size());
            comand.execute();
            write.add(comand);
        }
        else if(KeyEvent.VK_BACK_SPACE == evt.getKeyCode() && !evt.isControlDown()){
            System.out.println("If borro");
            delete.add(new CommandDelete(textArea));
        }else if(!evt.isControlDown()) {
            System.out.println("Else escribio");
            write.add(new CommandWrite(textArea));
        }
    }//GEN-LAST:event_textAreaKeyPressed
  
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(GuordMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(GuordMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(GuordMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(GuordMainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                GuordMainFrame mf = new GuordMainFrame();
                mf.setSize(800, 600);
                mf.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenuItem autoCorrectStyleMenuItem;
    private javax.swing.JMenuItem exitMenuItem;
    private javax.swing.JFormattedTextField jFormattedTextField1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenu jMenu3;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem loadMenuItem;
    private javax.swing.JMenuItem saveMenuItem;
    public static javax.swing.JTextArea textArea;
    private javax.swing.JScrollPane textjsp;
    // End of variables declaration//GEN-END:variables
}
